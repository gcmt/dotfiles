#!/usr/bin/env python

import os
import re
import sys
import i3ipc
import argparse
from html import escape
from operator import attrgetter, itemgetter
from subprocess import run, PIPE


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: {msg}", file=sys.stderr)


# Turn windows into formatted lines to be passed to Rofi.
# Pango markup is supported if the '-markup-rows' Rofi option is used:
# https://developer.gnome.org/pango/stable/PangoMarkupFormat.html
def format_windows(windows, args):
    dimcolor = '#797d84'
    for w in windows:
        row = ''
        workspace = w.workspace().name
        if not args.hide_workspace:
            row += f"<span foreground='{dimcolor}'>{escape(workspace)}</span>   "
        if workspace == '_scratch':
            row += f"<span foreground='{dimcolor}'>{escape(w.name)}</span>"
        else:
            row += f"{escape(w.name)}" if w.focused else escape(w.name)
        yield row


# Match a window against the given rules.
# All rules must be satisfied for a successful match.
def match(win, rules):
    results = []
    for rule in rules:
        try:
            if re.match('!?\w+=', rule):
                prop, string = rule.split('=', maxsplit=1)
                prop_ = prop[1:] if prop.startswith('!') else prop
                success = getattr(win, prop_) == string
            elif re.match('!?\w+~', rule):
                prop, regex = rule.split('~', maxsplit=1)
                prop_ = prop[1:] if prop.startswith('!') else prop
                success = re.search(regex, getattr(win, prop_)) is not None
            else:
                raise AttributeError(f"invalid rule '{rule}'")
            result = not success if prop.startswith('!') else success
            results.append(result)
        except AttributeError as e:
            error(e)
            pass
    return not rules or all(results)


# Get windows.
def get_windows(tree, args):
    windows, scratchpad = [], []
    by_name = attrgetter('name')
    rules = list(map(itemgetter(0), args.g)) if args.g else []
    for space in sorted(tree.workspaces(), key=by_name):
        for win in sorted(space.leaves(), key=by_name):
            win.window_name = win.name
            win.workspace_name = space.name
            win.workspace_num = space.num
            if not match(win, rules):
                continue
            if space.name != '_scratch':
                windows.append(win)
            elif args.scratchpad:
                scratchpad.append(win)
    windows += scratchpad
    return windows


# Fix various window properties.
def fix_windows(windows):
    for win in windows:
        if win.window_class == 'Firefox' and win.name == 'Library':
            win.name += ' - Mozilla Firefox'
        elif win.window_class == 'Nemo':
            win.name += ' - Nemo'
        elif win.window_class == 'git-cola':
            win.name += ' - Git Cola'
        yield win


# Get the mause coordinates with xdotool
def get_mouse_coordinates():
    try:
        cmd = ['xdotool', 'getmouselocation']
        stdout = run(cmd, stdout=PIPE, encoding='utf8').stdout
    except FileNotFoundError:
        error('xdotool not found')
        sys.exit(1)
    match = re.search('x:(\d+) y:(\d+)', stdout)
    if not match:
        return None, None
    return match.group(1), match.group(2)


# Execute rofi and return the user choice.
def rofi(windows, args):

    try:
        selected = [w.focused for w in windows].index(1)
    except ValueError:
        selected = 0

    options  = ['-dmenu', '-i', '-format', 'i']
    options += ['-markup-rows', '-selected-row', str(selected)]

    chars = max([len(w.name) + len(w.workspace().name) for w in windows]) + 10
    if args.tiny:
        options += ['-theme', 'tiny']
        chars = max([min([chars, 100]), 80])
    else:
        options += ['-theme', 'main-light']
        chars = max([min([chars, 120]), 80])
    options += ['-theme-str', f'window {{ width: {chars}ch; }}']

    lines = min(len(windows), 12)
    options += ['-theme-str', f'listview {{ fixed-height: false; lines: {lines}; }}']

    if args.mouse:

        x, y = get_mouse_coordinates()
        if not x and not y:
            error("can't get mouse location")
            sys.exit(1)

        if args.mouse == 'xy':
            options += ['-theme-str', f'window {{ x-offset: {x}px; y-offset: {y}px; }}']
            options += ['-theme-str', 'window { location: north west; anchor: north west; }']
        elif args.mouse == 'x':
            options += ['-theme-str', f'window {{ x-offset: {x}px; }}']
            options += ['-theme-str', 'window { location: west; anchor: center; }']
        elif args.mouse == 'y':
            options += ['-theme-str', f'window {{ y-offset: {y}px; }}']
            options += ['-theme-str', 'window { location: north; anchor: center; }']

    if len(windows) <= lines:
        options += ['-theme-str', 'listview { scrollbar: false; }']

    if not args.inputbar:
        options += ['-theme-str', 'mainbox { children: [listview]; }']
        options += ['-kb-row-up', 'Up,Control+k,k', '-kb-row-down', 'Down,Control+j,Super+Tab,j']
        options += ['-kb-accept-entry', 'l,Return,Control+d', '-kb-cancel', 'Escape,q']
        options += ['-kb-custom-1', 'm', '-kb-custom-2', 'underscore']
        options += ['-kb-custom-3', 'o', '-kb-custom-4', 'Q']
        options += ['-kb-custom-5', 'a', '-kb-custom-6', 'i']
    else:
        options += ['-kb-custom-1', 'Control+m', '-kb-custom-2', 'Super+underscore']
        options += ['-kb-custom-3', 'Control+o', '-kb-custom-4', 'Super+Q']
        options += ['-kb-custom-5', 'Control+a', '-kb-custom-6', 'Control+i']

    try:
        cmd = ['rofi'] + options
        input = "\n".join(format_windows(windows, args))
        proc = run(cmd, input=input, stdout=PIPE, encoding='utf8')
        return proc.stdout.strip(), proc.returncode
    except FileNotFoundError:
        error('rofi not found')
        sys.exit(1)


# Parse command line arguments.
def parse_args():
    parser = argparse.ArgumentParser(description="Improved i3 window switcher")

    parser.add_argument('-mouse', const='xy', nargs='?', choices=['x', 'y', 'xy'], help="display rofi at mouse position")
    parser.add_argument('-tiny', action='store_true', help="display a tiny menu")
    parser.add_argument('-hide-workspace', action='store_true', default=False, help="hide workspaces")
    parser.add_argument('-g', nargs='*', action='append', help="filter windows")

    group1 = parser.add_mutually_exclusive_group(required=False)
    group1.add_argument('-inputbar', action='store_true', default=True, help="display the input bar")
    group1.add_argument('-no-inputbar', action='store_false', dest='inputbar', help="hide the input bar")

    group2 = parser.add_mutually_exclusive_group(required=False)
    group2.add_argument('-scratchpad', action='store_true', default=True, help="include scratchpad windows")
    group2.add_argument('-no-scratchpad', action='store_false', dest='scratchpad', help="exclude scratchpad windows")

    return parser.parse_args()


def main():

    args = parse_args()
    i3 = i3ipc.Connection()
    tree = i3.get_tree()

    windows = get_windows(tree, args)
    if not windows:
        sys.exit(0)

    windows = list(fix_windows(windows))

    # 'choice' will be empty when pressing -kb-cancel but it will be -1 when
    # pressing -kb-accept-entry with nothing selected
    choice, exitcode = rofi(windows, args)
    if not choice or choice == '-1':
        sys.exit(0)

    win = windows[int(choice)]

    # -kb-accept-entry
    if exitcode == 0:
        # focus the selected window (or retrieve it from the scratchpad)
        if win.workspace().name == '_scratch':
            win.command('move to workspace current, focus')
        else:
            win.command('focus')
        sys.exit(0)

    # -kb-custom-1
    if exitcode == 10:
        # move the selected window to the current workspace
        win.command('move to workspace current, focus')
        sys.exit(0)

    # -kb-custom-2
    if exitcode == 11:
        # move the selected window to the scratchpad
        win.command('move to workspace _scratch')
        os.execv(sys.argv[0], sys.argv)

    # -kb-custom-3
    if exitcode == 12:
        # switch to drun
        os.execvp('rofi', ['rofi', '-show', 'drun'])

    # -kb-custom-4
    if exitcode == 13:
        # kill selected window
        run(['xkill', '-id', f"{win.window}"])
        os.execv(sys.argv[0], sys.argv)

    # -kb-custom-5
    if exitcode == 14:
        # hide/show scratchpad windows
        argv  = [a for a in sys.argv if 'scratchpad' not in a]
        argv += ['-no-scratchpad'] if args.scratchpad else ['-scratchpad']
        os.execv(argv[0], argv)

    # -kb-custom-6
    if exitcode == 15:
        # toggle input bar
        argv  = [a for a in sys.argv if 'inputbar' not in a]
        argv += ['-no-inputbar'] if args.inputbar else ['-inputbar']
        os.execv(argv[0], argv)


if __name__ == '__main__':
    main()
