#!/usr/bin/env python

import os
import sys
import i3ipc
import argparse
from subprocess import Popen, PIPE

# Turn windows into formatted lines to be passed to Rofi.
# Pango markup is supported if the '-markup-rows' Rofi option is used:
# https://developer.gnome.org/pango/stable/PangoMarkupFormat.html
def format_windows(windows):
    lines = []
    dimcolor = '#797d84'
    for win in windows:
        wsname = win.workspace().name
        ws = '$' if wsname == '__i3_scratch' else wsname
        row = f"<span foreground='{dimcolor}'>{ws}</span>   "
        if wsname == '__i3_scratch':
            row += f"<span foreground='{dimcolor}'>{win.name}</span>"
        else:
            row += f"<b>{win.name}</b>" if win.focused else win.name
        lines.append(row)
    return lines


# Get windows of all workspaces. If the 'scratchpad' argument is given and it's
# True, windows in the scratchpad workspace are also returned.
def get_windows(tree, scratchpad=True):
    windows = []
    for ws in tree.workspaces():
        windows += ws.leaves()
    windows.sort(key=lambda w: w.workspace().num)
    if scratchpad:
        windows += tree.scratchpad().leaves()
    return windows


# Execute rofi and return the user choice.
def rofi(windows, inputbar=True):

    lines = min(len(windows), 12)
    try:
        selected = [w.focused for w in windows].index(1)
    except ValueError:
        selected = 0

    options  = ['-dmenu', '-i', '-format', 'i']
    options += ['-markup-rows', '-lines', str(lines), '-selected-row', str(selected)]

    confdir = os.environ['XDG_CONFIG_HOME']
    style  = ['-theme', os.path.join(confdir, 'rofi/themes/main-light')]

    if len(windows) <= lines:
        style += ['-theme-str', 'listview { scrollbar: false; }']

    if not inputbar:
        style += ['-theme-str', 'mainbox { children: [listview]; }']
        options += ['-kb-row-up', 'Up,Control+k,k', '-kb-row-down', 'Down,Control+j,j']
        options += ['-kb-accept-entry', 'l,Control+d', '-kb-cancel', 'Escape,q']
        options += ['-kb-custom-1', 'm', '-kb-custom-2', 'underscore', '-kb-custom-3', 'o']
    else:
        options += ['-kb-custom-1', 'Control+m', '-kb-custom-2', 'Super+underscore', '-kb-custom-3', 'Control+o']

    lines = format_windows(windows)
    proc = Popen(['rofi'] + options + style, stdin=PIPE, stdout=PIPE)
    out = proc.communicate("\n".join(lines).encode())[0].decode()

    return out.strip(), proc.returncode


# Parse command line arguments.
def parse_args():
    parser = argparse.ArgumentParser(description="Improved i3 window switcher")
    group1 = parser.add_mutually_exclusive_group(required=False)
    group1.add_argument('-inputbar', action='store_true', default=True, help="display the input bar")
    group1.add_argument('-no-inputbar', action='store_false', dest='inputbar', help="hide the input bar")
    group2 = parser.add_mutually_exclusive_group(required=False)
    group2.add_argument('-scratchpad', action='store_true', default=True, help="include scratchpad windows")
    group2.add_argument('-no-scratchpad', action='store_false', dest='scratchpad', help="exclude scratchpad windows")
    return parser.parse_args()


def main():

    args = parse_args()
    i3 = i3ipc.Connection()
    tree = i3.get_tree()

    windows = get_windows(tree, args.scratchpad)
    if not windows:
        sys.exit(0)

    # 'choice' will be empty when pressing -kb-cancel but it will be -1 when
    # pressing -kb-accept-entry with nothing selected
    choice, exitcode = rofi(windows, args.inputbar)
    if not choice or choice == '-1':
        sys.exit(0)

    id = windows[int(choice)].id

    # -kb-accept-entry
    if exitcode == 0:
        # focus the selected window
        i3.command(f'[con_id="{id}"] focus; floating disable')
        sys.exit(0)

    # -kb-custom-1
    if exitcode == 10:
        # move the selected window to the current workspace
        num = tree.find_focused().workspace().num
        i3.command(f'[con_id="{id}"] move to workspace number {num}; floating disable')
        sys.exit(0)

    # -kb-custom-2
    if exitcode == 11:
        # move the selected window to the scratchpad
        i3.command(f'[con_id="{id}"] move scratchpad')
        os.execv(sys.argv[0], sys.argv)

    # -kb-custom-3
    if exitcode == 12:
        os.execvp('rofi', ['rofi', '-show', 'drun'])

if __name__ == '__main__':
    main()
