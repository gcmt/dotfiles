#!/usr/bin/env python

import os
import re
import sys
import argparse
import i3ipc
import shlex
from pathlib import Path


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: {msg}", file=sys.stderr)


def parse_args():

    parser = argparse.ArgumentParser(allow_abbrev=False, description="i3 focus helper")

    parser.add_argument('-id', help="The window id")
    parser.add_argument('-t', help="The window name (title)")
    parser.add_argument('-c', help="The window class")
    parser.add_argument('-n', help="The window instance")
    parser.add_argument('-m', help="The window marks (use - to require no marks)")
    parser.add_argument('-fallback', default="", help="The command to execute when the targeted window does not exist")

    group1 = parser.add_mutually_exclusive_group(required=False)
    group1.add_argument('-move', action='store_true', default=False, help="Move the targeted window to the current workspace")
    group1.add_argument('-kill', action='store_true', default=False, help="Kill the targeted window")
    group1.add_argument('-bounce', action='store_true', default=True, help="Focus the previously focused window when the target window is already focused (default)")
    group1.add_argument('-nobounce', action='store_false', dest='bounce', help="Don't focus the previously focused window when the target window is already focused")

    args = parser.parse_args()

    if args.id is None and args.t is None and args.c is None and args.n is None and args.m is None:
        parser.print_usage(file=sys.stderr)
        error("provide at least one selection criteria")
        sys.exit(2)

    if args.m != "-":
        args.m = set(args.m.split(',')) if args.m else set()

    if args.id:
        try:
            args.id = int(args.id, 0)
        except ValueError:
            error(f"invalid argument '{args.id}' for option -id, must be a number")
            sys.exit(1)

    return args


def match(args, win):
    if args.m == "-" and win.marks:
        return False
    if isinstance(args.m, set) and args.m and not args.m & set(win.marks):
        return False
    if args.t and not re.search(args.t, win.name):
        return False
    if args.c and not re.match(args.c, win.window_class):
        return False
    if args.n and not re.match(args.n, win.window_instance):
        return False
    return True


def get_last_window(tree):
    try:
        path = f'/run/user/{os.getuid()}/i3-last-window'
        id = int(Path(path).read_text().strip(), 0)
        return tree.find_by_window(id)
    except FileNotFoundError:
        error(f"could not read last window id, file not found: {path}")
    except ValueError:
        error(f"invalid window id '{id}' in {path}")


def focus(win, move=False):
    if win.workspace().name == '_scratch' or move:
        win.command('move to workspace current')
    return 'True' in str(win.command('focus'))


def kill(win):
    return 'True' in str(win.command('kill'))


def main():

    args = parse_args()
    i3 = i3ipc.Connection()
    tree = i3.get_tree()
    focused = tree.find_focused()

    if args.bounce and not args.kill:
        if focused.type == 'con' and match(args, focused):
            last = get_last_window(tree)
            if not last:
                sys.exit(1)
            focus(last)
            sys.exit()

    success = False
    for win in tree.leaves():
        if args.id and args.id == win.window or not args.id and match(args, win):
            if args.kill:
                success = kill(win)
            else:
                success = focus(win, move=args.move)
            break

    fallback = shlex.split(args.fallback)
    if fallback and not success:
        try:
            os.execvp(fallback[0], fallback)
        except FileNotFoundError:
            error(f"command not found: {fallback[0]}")
            sys.exit(1)
    else:
        sys.exit(not success)


if __name__ == '__main__':
    main()
