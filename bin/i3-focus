#!/usr/bin/env python

import os
import re
import sys
import argparse
import i3ipc
import shlex
from pathlib import Path


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: error: {msg}", file=sys.stderr)


def parse_args():

    parser = argparse.ArgumentParser(description="i3 focus helper")
    parser.add_argument('-t', help="The window name (title)")
    parser.add_argument('-c', help="The window class")
    parser.add_argument('-n', help="The window instance")
    parser.add_argument('-m', help="The window marks (use - to require no marks)")
    parser.add_argument('-fallback', default="", help="The command to execute when no window gets focused")
    parser.add_argument('-id', help="The window id")
    args = parser.parse_args()

    if args.id is None and args.t is None and args.c is None and args.n is None and args.m is None:
        parser.print_usage(file=sys.stderr)
        error("provide at least one selection criteria")
        sys.exit(2)

    if args.m != "-":
        args.m = set(args.m.split(',')) if args.m else set()

    if args.id:
        try:
            args.id = int(args.id, 16)
        except ValueError:
            error("invalid id, must be an hexadecimal number")
            sys.exit(2)

    return args


def match(args, win):
    if args.m == "-" and win.marks:
        return False
    if isinstance(args.m, set) and args.m and not args.m & set(win.marks):
        return False
    if args.t and not re.search(args.t, win.name):
        return False
    if args.c and not re.match(args.c, win.window_class):
        return False
    if args.n and not re.match(args.n, win.window_instance):
        return False
    return True


def get_last_window(tree):
    try:
        id = Path(f'/run/user/{os.getuid()}/i3-last-window').read_text()
        return tree.find_by_window(int(id, 16))
    except (FileNotFoundError, ValueError):
        return None


def focus(win):
    if win.workspace().name == '_scratch':
        return win.command('move to workspace current')
    return win.command('focus')


def main():

    args = parse_args()
    i3 = i3ipc.Connection()
    tree = i3.get_tree()

    if not args.id:
        # If the target window is already focused, change the focus to the
        # previously focused window
        focused = tree.find_focused()
        if focused.type == 'con' and match(args, focused):
            last = get_last_window(tree)
            if not last:
                sys.exit(1)
            focus(last)
            sys.exit(0)

    success = False
    for win in tree.leaves():
        if args.id and args.id == win.window or not args.id and match(args, win):
            res = focus(win)
            success = "True" in str(res)
            break

    fallback = shlex.split(args.fallback)
    if fallback and not success:
        try:
            os.execvp(fallback[0], fallback)
        except FileNotFoundError:
            error(f"command not found: {fallback[0]}")
            sys.exit(1)
    else:
        sys.exit(not success)


if __name__ == '__main__':
    main()
