#!/usr/bin/env python

import os
import re
import sys
import argparse
import i3ipc
import shlex


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: error: {msg}", file=sys.stderr)


def parse_args():

    parser = argparse.ArgumentParser(description="i3 focus helper")
    parser.add_argument('-t', help="The window name (title)")
    parser.add_argument('-c', help="The window class")
    parser.add_argument('-n', help="The window instance")
    parser.add_argument('-m', help="The window marks")
    parser.add_argument('-fallback', help="The program to execute when focusing fails")
    args = parser.parse_args()

    if not (args.t or args.c or args.n or args.m):
        parser.print_usage(file=sys.stderr)
        error("provide at least one selection criteria")
        sys.exit(2)

    return args


def main():

    args = parse_args()

    i3 = i3ipc.Connection()
    windows = i3.get_tree().leaves()

    fallback = shlex.split(args.fallback) if args.fallback else None
    wanted_marks = set(args.m.split(',')) if args.m else set()

    success = False
    for w in windows:
        marks = set(w.marks)
        if not wanted_marks and marks:
            continue
        if wanted_marks and not wanted_marks & marks:
            continue
        if args.t and not re.search(args.t, w.name):
            continue
        if args.c and not re.match(args.c, w.window_class):
            continue
        if args.n and not re.match(args.n, w.window_instance):
            continue
        res = w.command('focus')
        success = "True" in str(res)

    if fallback and not success:
        try:
            os.execvp(fallback[0], fallback)
        except FileNotFoundError:
            error(f"command not found: {fallback[0]}")
            sys.exit(1)


if __name__ == '__main__':
    main()
