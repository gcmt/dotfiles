#!/usr/bin/env python

import os
import re
import sys
import argparse
import i3ipc
import shlex


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: error: {msg}", file=sys.stderr)


def parse_args():

    parser = argparse.ArgumentParser(description="i3 focus helper")
    parser.add_argument('-t', help="The window name (title)")
    parser.add_argument('-c', help="The window class")
    parser.add_argument('-n', help="The window instance")
    parser.add_argument('-m', help="The window marks (use - to require no marks)")
    parser.add_argument('-fallback', default="", help="The command to execute when no window gets focused")
    args = parser.parse_args()

    if args.t is None and args.c is None and args.n is None and args.m is None:
        parser.print_usage(file=sys.stderr)
        error("provide at least one selection criteria")
        sys.exit(2)

    return args


def match(args, win):
    if args.m == "-" and win.marks:
        return False
    if isinstance(args.m, set) and args.m and not args.m & set(win.marks):
        return False
    if args.t and not re.search(args.t, win.name):
        return False
    if args.c and not re.match(args.c, win.window_class):
        return False
    if args.n and not re.match(args.n, win.window_instance):
        return False
    return True


def get_last_window():
    try:
        with open(os.path.expanduser('~/.run/i3/last-window'), 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        return ''


def main():

    args = parse_args()

    if args.m != "-":
        args.m = set(args.m.split(',')) if args.m else set()

    i3 = i3ipc.Connection()
    tree = i3.get_tree()

    # If the target window is already focused, change the focus to the
    # previously focused window
    focused = tree.find_focused()
    if match(args, focused):
        id = get_last_window()
        if not id:
            sys.exit(1)
        i3.command(f'[id="{id}"] focus')
        sys.exit(0)

    success = False
    for win in tree.leaves():
        if match(args, win):
            res = win.command('focus')
            success = "True" in str(res)
            break

    fallback = shlex.split(args.fallback)
    if fallback and not success:
        try:
            os.execvp(fallback[0], fallback)
        except FileNotFoundError:
            error(f"command not found: {fallback[0]}")
            sys.exit(1)


if __name__ == '__main__':
    main()
