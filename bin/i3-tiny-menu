#!/usr/bin/env python

import os
import re
import sys
import argparse
from subprocess import run, PIPE


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: {msg}", file=sys.stderr)


def get_mouse_coordinates():

    try:
        cmd = ['xdotool', 'getmouselocation']
        stdout = run(cmd, stdout=PIPE, encoding='utf8').stdout
    except FileNotFoundError:
        error('xdotool not found')
        sys.exit(1)

    match = re.search('x:(\d+) y:(\d+)', stdout)
    if not match:
        return None, None

    return match.group(1), match.group(2)


def rofi(args, rofiargs):

    if not sys.stdin.isatty():
        input = [line.strip() for line in sys.stdin]
    else:
        input = None

    options  = ['-dmenu', '-click-to-exit', '-theme', 'i3-tiny-menu']
    options += ['-me-select-entry', '', '-me-accept-entry', 'MousePrimary']

    x, y = get_mouse_coordinates()
    if not x and not y:
        error("can't get mouse location")
        sys.exit(1)

    options += ['-theme-str', f'window {{ x-offset: {x}px; y-offset: {y}px; }}']

    if args.width:
        options += ['-theme-str', f'window {{ width: {args.width}; }}']
    elif input:
        chars = max(len(max(input, key=len)) + 10, 20)
        options += ['-theme-str', f'window {{ width: {chars}ch; }}']

    if not args.inputbar:
        options += ['-theme-str', 'mainbox { children: [listview]; }']
        options += ['-kb-row-up', 'Up,Control+k,k', '-kb-row-down', 'Down,Control+j,j']
        options += ['-kb-accept-entry', 'l,Return,Control+d', '-kb-cancel', 'Escape,q']

    try:
        cmd = ['rofi'] + options + rofiargs
        input = "\n".join(input) if input else None
        stdout = run(cmd, input=input, stdout=PIPE, encoding='utf8').stdout
        return stdout.strip()
    except FileNotFoundError:
        error('rofi not found')
        sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser(allow_abbrev=False, description="i3 tiny menu")
    parser.add_argument('-width', help="force a certain width (see rofi man page)")
    parser.add_argument('-inputbar', action='store_true', default=False, help="display the input bar")
    return parser.parse_known_args()


def main():

    args, rofiargs = parse_args()

    choice = rofi(args, rofiargs)
    if not choice:
        sys.exit(0)

    print(choice)


if __name__ == '__main__':
    main()
