#!/bin/bash

print_help() {
	echo "Usage: "
	echo "  lock [-force] [-blank]"
	echo
	echo "Options: "
	echo "  -force   Force screen locking when fullscreen is on and regardless of ignored classes (${excluded[*]})"
	echo "  -blank   Turn off the screen after $delay seconds"
	echo
}

delay=0
force=0
blank=0

excluded=(mpv)

while (( $# )); do
	if [[ "$1" == "-force" ]]; then
		force=1
	elif [[ "$1" == "-blank" ]]; then
		blank=1
		if [[ "$2" =~ ^[0-9]+$ ]]; then
			delay="$2"
			shift
		fi
	elif [[ "$1" == "-help" ]]; then
		print_help
		exit 0
	else
		echo "Unknown option: $1" 1>&2
		print_help
		exit 1
	fi
	shift
done

if (( force == 0 )); then
	id=$(xdotool getwindowfocus)
	# Do not lock the screen when fullscreen is active
	wm_state=$(xprop -id "$id" | grep _NET_WM_STATE)
	if echo "$wm_state" | grep -q FULLSCREEN; then
		echo 1>&2 "cannot lock screen: fullscreen on"
		exit 1
	fi
	# Do not lock the screen when certain windows are focused
	wm_class=$(xprop -id "$id" 2> /dev/null | grep WM_CLASS)
	class=$(echo "$wm_class" | grep -Po '(?<=")\w+(?=")' | tail -n1)
	if (IFS=$'\n'; echo "${excluded[*]}") | grep -Fxiq "$class"; then
		echo 1>&2 "cannot lock screen: focused window class is '$class'"
		exit 1
	fi
fi

scriptname="$(basename "$0")"
pidfile="/run/user/$UID/$scriptname.pid"

exec 200>"$pidfile"
if ! flock -n 200; then
	echo "$scriptname: already running" 2>&1
	exit 1
else
	echo $$ >&200
fi

volume_state=1
if amixer -D pulse get Master | grep -q '\[off\]$'; then
	volume_state=0
fi

if (( volume_state == 1 )); then
	volume -q mute
fi

(

	cleanup() {
		local parent="$(cat "$pidfile")"
		if [[ "$(ps -p "$parent" -o comm=)" == "lock" ]]; then
			kill "$parent"
		fi
		rm -f "$pidfile"
		if (( volume_state == 1 )); then
			volume -q unmute
		fi
	}

	trap cleanup 0

	bg="$(grep -Po "(?<=file\=).+" "$HOME/.config/nitrogen/bg-saved.cfg")"
	i3lock -ne -i "$bg"

) &

if (( blank == 1 )); then
	sleep "$delay"
	xset dpms force off
fi
