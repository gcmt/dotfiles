#!/usr/bin/env python

import os
import re
import sys
import atexit
import signal
import argparse
from pathlib import Path
from datetime import datetime
from functools import partial
from subprocess import run, Popen, PIPE


UID = os.getuid()
DISPLAY = os.environ['DISPLAY']

PIDFILE = Path(f"/run/user/{UID}/rec.pid")
METAFILE = Path(f"/run/user/{UID}/rec.out")
FIFO = Path("/tmp/polybar_recording.fifo")


def polybar_send(cmd):
    FIFO.is_fifo() and FIFO.write_text(f'{cmd}\n')


def error(msg, exit=True):
    script = os.path.basename(__file__)
    print(f"{script}: {msg}", file=sys.stderr)
    exit and sys.exit(1)


def get_screen_size(display):

    try:
        cmd = ['xrandr', '-d', display]
        stdout = run(cmd, stdout=PIPE, encoding='utf8').stdout
    except FileNotFoundError as e:
        error('xrandr not found')

    for line in stdout.split('\n'):
        if 'connected' in line:
            match = re.search('(\d+)x(\d+)', line)
            if match:
                return int(match.group(1)), int(match.group(2))

    return None, None


def get_selection():

    try:
        cmd = ['slop', '-f', '%x %y %w %h']
        proc = run(cmd, stdout=PIPE, encoding='utf8')
    except FileNotFoundError:
        error('slop not found')

    if proc.returncode:
        sys.exit(1)

    return proc.stdout.split()


def ffmpeg(dest, args):

    if args.root:
        x, y, w, h = 0, 0, *get_screen_size(args.display)
    else:
        x, y, w, h = get_selection()

    cmd  = ['ffmpeg']
    cmd += ['-f', 'x11grab']
    cmd += ['-show_region', args.show_region]
    cmd += ['-region_border', args.region_border]
    cmd += ['-draw_mouse', args.draw_mouse]
    cmd += ['-framerate', args.framerate]
    cmd += ['-video_size', f"{w}x{h}"]
    cmd += ['-i', f"{args.display}+{x},{y}"]
    cmd += ['-vcodec', args.vcodec]
    cmd += ['-preset', args.preset]
    cmd += ['-crf', args.crf]
    cmd += [dest]

    try:
        return Popen(cmd)
    except FileNotFoundError:
        error('ffmpeg not found')


def parse_args():
    parser = argparse.ArgumentParser(allow_abbrev=False)
    parser.add_argument('-root', action="store_true", default=False)
    parser.add_argument('-display', default=DISPLAY)
    parser.add_argument('-show_region', default="1")
    parser.add_argument('-region_border', default="3")
    parser.add_argument('-draw_mouse', default="1")
    parser.add_argument('-framerate', default="25")
    parser.add_argument('-vcodec', default="libx264")
    parser.add_argument('-preset', default="medium")
    parser.add_argument('-crf', default="17")
    return parser.parse_args()


def main():

    def cleanup(*args):
        try:
            PIDFILE.unlink()
            METAFILE.unlink()
        except FileNotFoundError:
            pass

    def stop_recording(proc, *args):
        polybar_send('stop')
        if proc.poll() is None:
            proc.terminate()

    def exit(*args):
        sys.exit()

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, exit)
    signal.signal(signal.SIGTERM, exit)

    args = parse_args()

    if PIDFILE.exists():

        try:
            dest = METAFILE.read_text()
        except FileNotFoundError:
            dest = '???'

        try:
            pid = PIDFILE.read_text().strip()
            pid = int(pid)
        except FileNotFoundError:
            error(f"file '{PIDFILE}' not found")
        except ValueError:
            error(f"invalid pid value '{pid}'")

        try:
            os.kill(pid, signal.SIGTERM)
        except ProcessLookupError:
            error(f"can't stop recording process with pid '{pid}'")

        print(f"Stopped recording to {dest}")

    else:

        timestamp = datetime.now().strftime('%Y-%m-%d-%T')
        dest = Path.home() / f'Downloads/Recording_{timestamp}.mp4'

        proc = ffmpeg(dest, args)
        print(f"Started recording to {dest}...")
        polybar_send('start')

        METAFILE.write_text(str(dest))
        PIDFILE.write_text(str(os.getpid()))

        atexit.register(partial(stop_recording, proc))

        proc.wait()


if __name__ == '__main__':
    main()
