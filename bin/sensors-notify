#!/bin/bash

_err() {
	echo "$scriptname: $1" 1>&2
	exit 1
}

_parse_args() {
	while (( $# )); do
		if [[ "$1" == "-i" || "$1" == "-interval" ]]; then
			if [[ "$2" =~ ^[0-9.]+$ ]]; then
				interval="$2"
				shift
			else
				_err "Option -interval requires an argument"
			fi
		elif [[ "$1" == "-t" || "$1" == "-timeout" ]]; then
			if [[ "$2" =~ ^[0-9]+$ ]]; then
				timeout="$2"
				shift
			else
				_err "Option -timeout requires an argument"
			fi
		elif [[ "$1" == "-pin" || "$1" == "-pinned" ]]; then
			pinned=1
		else
			_err "Unknown option: $1"
		fi
		shift
	done
}

_get_info() {
	local info gpu_info
	gpu_info="$(sudo cat "$gpu_info_file" 2>/dev/null | tail -n +28 | head -n +7 | sed -e 's/^\s\+//')"
	if (( $? == 0 )); then
		info+=$'<b>amdgpu_pm_info</b>\n'
		info+="$gpu_info"
		info+=$'\n\n'
	fi
	info+="$(sensors | tr -s " " | grep -Pv "^Adapter:" | sed "s;^[^:]\+$;<b>&1</b>;")"
	echo "$info"
}

scriptname="$(basename "$0")"
gpu_info_file="/sys/kernel/debug/dri/0/amdgpu_pm_info"

id=1010
timeout=5000
verbose=0
interval="0.5"
pinned=0

_parse_args "$@"

if (( $(pgrep -c sensors-notify) > 1 )); then
	dunstify -C $id
	killall sensors-notify
fi

while true; do
	dunstify -t $timeout -r $id "Sensors" "$(_get_info)"
	(( pinned == 0 )) && break
	sleep "$interval"
done
