#!/usr/bin/env python

import re
import os
import sys
from html import escape
from subprocess import run, PIPE
from collections import namedtuple


Window = namedtuple('Window',
    ['id', 'num', 'name', 'flags', 'pane_title', 'is_current']
)


# Return the active window id
def get_current_window_id():
    cmd = ['tmux', 'display', '-p', '#{window_id}']
    return run(cmd, stdout=PIPE, encoding='utf8').stdout.strip()


# Return all windows of the current session.
def get_windows():
    current = get_current_window_id()
    cmd = ['tmux', 'list-windows', '-F', '#{window_id};;#I;;#W;;#F;;#{pane_title}']
    proc = run(cmd, stdout=PIPE, encoding='utf8')
    windows = []
    for line in proc.stdout.strip().split("\n"):
        tokens = line.split(';;')
        is_current = True if tokens[0] == current else False
        win = Window(*tokens, is_current)
        windows.append(win)
    return windows


# Return the x resource with the given name.
def get_xresource(name):
    name = re.escape(name)
    patt = re.compile(rf"\b{name}:\s+(\S+)$")
    cmd = ['xrdb', '-query', 'all']
    proc = run(cmd, stdout=PIPE, encoding='utf8')
    for line in proc.stdout.split("\n"):
        match = patt.search(line)
        if match:
            return match.group(1)


# Return the x color resource with the given name.
# rgb:/rr/gg/bb -> #rrggbb
def get_xcolor(name):
    value = get_xresource(name)
    if value is not None:
        return value.replace('rgb:', '#').replace('/', '')


# Format windows into lines to be passed into rofi.
def format_windows(windows):
    dim = get_xcolor('color22')
    verydim = get_xcolor('color23')
    for win in windows:
        line = f'<span foreground="{dim}">#{escape(win.num)}</span> '
        line += f'<span>{escape(win.name)}</span>'
        line += f'<span foreground="{dim}">{escape(win.flags)}</span> '
        line += f'<span foreground="{verydim}">{escape(win.pane_title)}</span> '
        yield line


# Launch rofi.
def rofi(windows):

    lines = 8
    selected = 0

    for i, win in enumerate(windows):
        if win.is_current:
            selected = i

    options = ['-dmenu', '-format', 'i', '-no-custom', '-markup-rows']
    options += ['-selected-row', str(selected), '-lines', str(lines)]
    options += ['-kb-row-up', 'k', '-kb-row-down', 'j,Alt+Tab']
    options += ['-kb-accept-entry', 'l,Return', '-kb-cancel', 'Escape,q']
    options += ['-kb-custom-1', 'comma', '-kb-custom-2', 'Q']

    colorscheme = get_xresource('colorscheme.name') or 'light'
    style  = ['-theme', 'term-' + colorscheme]
    style += ['-theme-str', 'mainbox { children: [ listview ]; }']

    if len(windows) <= lines:
        style += ['-theme-str', 'listview { scrollbar: false; }']

    input = "\n".join(format_windows(windows))
    cmd = ['rofi'] + options + style
    proc = run(cmd, input=input, stdout=PIPE, encoding='utf8')
    return proc.stdout.strip(), proc.returncode


# Launch rofi for renaming the selected window.
def rofi_rename(window):

    options = ['-dmenu', '-p', 'Rename window: ', '-filter', window.name]

    colorscheme = get_xresource('colorscheme.name') or 'light'
    style  = ['-theme', 'term-' + colorscheme]
    style += ['-theme-str', 'listview { enabled: false; }']
    style += ['-theme-str', 'case-indicator { enabled: false; }']
    style += ['-theme-str', 'prompt { enabled: true; }']

    cmd = ['rofi'] + options + style
    proc = run(cmd, stdout=PIPE, encoding='utf8')
    return proc.stdout.strip()


def main():

    windows = get_windows()
    if not windows:
        sys.exit(0)

    choice, exitcode = rofi(windows)
    if not choice:
        sys.exit(0)

    target = windows[int(choice)]

    # -kb-accept-entry
    if exitcode == 0:
        # switch to the selected window
        run(['tmux', 'select-window', '-t', target.id])

    # -kb-custom-1
    if exitcode == 10:
        # rename the selected window
        choice = rofi_rename(target)
        if choice:
            run(['tmux', 'rename-window', '-t', target.id, choice])
        os.execv(sys.argv[0], sys.argv)

    # -kb-custom-2
    if exitcode == 11:
        # kill the selected window
        run(['tmux', 'kill-window', '-t', target.id])
        os.execv(sys.argv[0], sys.argv)

    sys.exit(0)


if __name__ == '__main__':
    main()
