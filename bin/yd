#!/bin/bash

_use_selection=0
_extract_audio=0
_low_res=0
_interactive=0

_NOTIFY_DELAY=60000

_OUTPUT_FORMAT_AUDIO="%(title)s.%(ext)s"
_OUTPUT_FORMAT_VIDEO="%(uploader)s - %(title)s.%(ext)s"

_FORMAT_VIDEO_HIGH='bestvideo[height<=1080][vcodec^=av01][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080][ext=mp4]+bestaudio/best[ext=mp4]/best'
_FORMAT_VIDEO_LOW='bestvideo[height<=720][vcodec^=av01][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=720][ext=mp4]+bestaudio/best[ext=mp4]/best'

while getopts "isxl" OPT; do
	case $OPT in
		i) _interactive=1 ;;
		s) _use_selection=1 ;;
		x) _extract_audio=1 ;;
		l) _low_res=1 ;;
        *) exit 1
	esac
done
shift $((OPTIND -1))

if (( _interactive == 1 )); then

    _yad_ret=$(yad \
        --form \
        --columns=1 \
        --title 'Youtube Downloader' \
        --text "<b>Youtube Downloader</b>" \
        --borders 10 \
        --separator $'\t' \
        --width 500 \
        --text-align fill \
        --field "" "" \
        --field "Audio only:chk" TRUE \
        --field "Low resolution:chk" TRUE \
        --button="Cancel":1 \
        --button="Download":0 \
    )

    IFS=$'\t' read -ra _fields <<< "${_yad_ret}"
    if [[ "${_fields[0]}" == "TRUE" ]]; then
        exit 1
    else
        _url=${_fields[0]}
    fi
    if [[ "${_fields[1]}" == "TRUE" ]]; then
        _extract_audio=1
    fi
    if [[ "${_fields[2]}" == "TRUE" ]]; then
        _low_res=1
    fi

else

    if (( _use_selection == 1 )); then
        _url="$(xclip -o -sel primary)"
    else
        _url="$1"
    fi

fi

if [[ -z "${_url}" ]]; then
	exit 1
fi

if (( _low_res == 1 )); then
	_format="${_FORMAT_VIDEO_LOW}"
else
	_format="${_FORMAT_VIDEO_HIGH}"
fi

if (( _extract_audio == 1 )); then
    _header="Downloading Video (Audio only)"
    _output_format="${_OUTPUT_FORMAT_AUDIO}"
else
    _header="Downloading Video"
    _output_format="${_OUTPUT_FORMAT_VIDEO}"
fi

_notify_id=$(dunstify -p -t "${_NOTIFY_DELAY}" "${_header}" "${_url}")

_title=$(yt-dlp --skip-download --print "%(title)s" "${_url}")
_exitcode=$?

if (( _exitcode != 0 )); then
	dunstify -t 10000 -u critical "Download Error" "yt-dlp failed with error code ${_exitcode}"
    echo >&2 "Error: yt-dlp failed with error code ${_exitcode}"
    exit 1
fi

echo "${_header}: ${_title}"
dunstify -t "${_NOTIFY_DELAY}" -r "${_notify_id}" "${_header}" "${_title}"

cd ~/Downloads || exit 1

notify_progress() {
    local header=$1
    local title=$2
    local progress=0
    local percent=
    while read -r line; do
        if grep -q '^\[ExtractAudio\]' <<< "${line}"; then
            header="Extracting Audio..."
            (( progress -= 3 ))
        fi
        percent=$(grep -Po '\d+\.?\d+(?=%)' <<< "${line}")
        if [[ -n "${percent}" ]]; then
            progress="${percent}"
        fi
        dunstify -h int:value:"${progress}" -t "${_NOTIFY_DELAY}" -r "${_notify_id}" "${header}" "${title}"
    done
}

if (( _extract_audio == 1 )); then
	yt-dlp --newline \
        --no-mtime \
        --format 'bestaudio/best'\
        --extract-audio \
        --audio-quality 0 \
        --audio-format mp3 \
        --output "${_output_format}" \
        "${_url}" \
        | notify_progress "${_header}" "${_title}"
else
	yt-dlp --newline \
        --no-mtime \
        --format "${_format}" \
        --output "${_output_format}" \
        "${_url}" \
        | notify_progress "${_header}" "${_title}"
fi

_exitcode=$?
if (( _exitcode == 0 )); then
    echo "Download successful"
	dunstify -t 5000 -r "${_notify_id}" "Download Finished" "${_title}"
else
    echo >&2 "Error: yt-dlp failed with error code ${_exitcode}"
	dunstify -t 10000 -u critical -r "${_notify_id}" "Download Error" "yt-dlp failed with error code ${_exitcode}"
fi
