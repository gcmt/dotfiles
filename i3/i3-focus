#!/usr/bin/env python

import argparse
import os
import re
import shlex
import sys
import time
from subprocess import PIPE, Popen, run

import i3pie


def error(msg):
    script = os.path.basename(__file__)
    print(f"{script}: {msg}", file=sys.stderr)


def fatal(msg):
    error(msg)
    sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser(allow_abbrev=False, description="i3 focus helper")

    parser.add_argument("-id", help="The window id")
    parser.add_argument("-t", help="The window name (title)")
    parser.add_argument("-c", help="The window class")
    parser.add_argument("-n", help="The window instance")
    parser.add_argument("-m", help="The window marks (use - to require no marks)")
    parser.add_argument(
        "-fallback",
        default="",
        help="The command to execute when the targeted window does not exist",
    )
    parser.add_argument(
        "-move",
        action="store_true",
        default=False,
        help="Move the targeted window to the current workspace",
    )
    group1 = parser.add_mutually_exclusive_group(required=False)
    group1.add_argument(
        "-bounce",
        action="store_true",
        default=True,
        help="Focus the previously focused window when the target window is already focused (default)",
    )
    group1.add_argument(
        "-nobounce",
        action="store_false",
        dest="bounce",
        help="Don't focus the previously focused window when the target window is already focused",
    )
    group2 = parser.add_mutually_exclusive_group(required=False)
    group2.add_argument(
        "-kill",
        action="store_true",
        default=False,
        help="Kill the window if already focused",
    )
    group2.add_argument(
        "-scratch",
        action="store_true",
        default=False,
        help="Instead of killing the window, move it to the scratchpad",
    )

    args = parser.parse_args()

    if (
        args.id is None
        and args.t is None
        and args.c is None
        and args.n is None
        and args.m is None
    ):
        parser.print_usage(file=sys.stderr)
        fatal("provide at least one selection criteria")

    if args.m != "-":
        args.m = set(args.m.split(",")) if args.m else set()

    if args.id:
        try:
            args.id = int(args.id, 0)
        except ValueError:
            fatal(f"invalid argument '{args.id}' for option -id, must be a number")

    return args


def match(args, win):
    """Match the given window with command line arguments"""
    if args.m == "-" and set(win.marks):
        # If '-' is given as mark, then explicitly require no marks
        return False
    if isinstance(args.m, set) and args.m and not args.m & set(win.marks):
        return False
    if args.t and not re.search(args.t, win.name):
        return False
    if args.c and not re.match(args.c, win.window_class):
        return False
    if args.n and not re.match(args.n, win.window_instance):
        return False
    return True


def get_last_window(tree):
    """Return the last focused window (requires i3-history)"""
    try:
        proc = run(["i3-history", "-print"], stdout=PIPE, encoding="utf8")
    except FileNotFoundError:
        error("i3-history not found")
    try:
        winid = proc.stdout.splitlines()[-2]
    except IndexError:
        return None
    try:
        winid = int(winid, 0)
        return tree.find(fn=lambda con: con.window_id == winid)
    except ValueError:
        error(f"invalid window id '{winid}'")
    return None


def focus(win, move=False):
    """Focus the given window"""
    print(win)
    if win.workspace().name == "_scratch" or move:
        win.command("move to workspace current")
    return not win.command("focus").error


def kill(win):
    """Quit the given window"""
    return not win.command("kill").error


def move_to_scratchpad(win):
    """Move the given window to the scratchpad"""
    return not win.command("move to workspace _scratch").error


def search_win_by_pid(pid, timeout=10):
    """Return the window id that belongs to the given process id"""
    xdotool = [
        "xdotool",
        "search",
        "--pid",
        str(pid),
        "--onlyvisible",
        "--all",
        "--limit",
        "1",
    ]
    timeout = time.time() + timeout
    while True:
        time.sleep(0.5)
        if time.time() > timeout:
            error(f"Could not find window with pid: {pid}")
            return None
        try:
            p = run(xdotool, stdout=PIPE, encoding="utf-8")
        except FileNotFoundError:
            error("command not found: xdotool")
            return None
        if p.returncode == 0:
            return p.stdout.strip()


def main(i3):
    args = parse_args()
    tree = i3.get_tree()

    focused = tree.focused_window()
    if args.bounce and not (args.scratch or args.kill or args.move or args.id):
        # if the window is already focused, move to the last focused window
        if focused and match(args, focused):
            if last := get_last_window(tree):
                focus(last)
                sys.exit()
            sys.exit(1)

    success = False
    for win in tree.windows():
        if args.id and args.id == win.window_id or not args.id and match(args, win):
            if args.scratch and win == focused:
                success = move_to_scratchpad(win)
            elif args.kill and win == focused:
                success = kill(win)
            else:
                success = focus(win, move=args.move)
            break

    fallback = shlex.split(args.fallback)
    if fallback and not success:
        # open the given fallback program if no window matched the rules
        try:
            pid = Popen(fallback).pid
        except FileNotFoundError:
            fatal(f"command not found: {fallback[0]}")
        if args.m and args.m != "-":
            # automatically mark the window if marks are given (first one only)
            if winid := search_win_by_pid(pid):
                mark = list(args.m)[0]
                i3.command(f'[id="{winid}"] mark "{mark}"')
    else:
        sys.exit(not success)


if __name__ == "__main__":
    with i3pie.Connection() as i3:
        main(i3)
