#!/bin/bash

current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$current_dir" || exit 1
source utils


notify() {
	if ! utils::polybar_visible && (( quiet == 0 )); then
		notify-send -t 3000 "$@"
	fi
}


notify_err() {
	notify -u critical "$@"
}


state_get() {
	utils::state_get "$state" "$@"
}


state_set() {
	utils::state_set "$state" "$@"
}


main() {

	if [[ -e "$errfile" ]]; then

		if (( "$(state_get running)" == 1 )); then
			notify_err "Backup Failed" "$(state_get archive '')"
		fi

		echo '%{F#ce7d86} Backup%{F-}'
		state_set running 0

	elif [[ -e "$runfile" ]]; then

		archive="$(cat "$runfile")"
		if (( "$(state_get running)" == 0 )); then
			state_set running 1
			state_set archive "$archive"
			notify "Backup Started" "$archive"
		fi

		echo " Backup"

	else

		if (( "$(state_get running)" == 1 )); then
			notify "Backup Finished" "$(state_get archive '')"
		fi

		echo ""
		state_set running 0

	fi

}


handle_left_click() {

	local archive
	if [[ -e "$errfile" ]]; then
		archive="$(cat "$errfile")"
		rm -rf "$errfile"
	elif [[ -e "$runfile" ]]; then
		archive="$(cat "$runfile")"
	else
		return 1
	fi

	if [[ "$archive" =~ ^rsync\.net ]]; then
		view_log borg-backup-rsync
	elif [[ "$archive" =~ MyPassport ]]; then
		view_log borg-backup-hdd
	fi

}


handle_right_click() {
	rm -rf "$errfile"
}


view_log() {
	urxvt -title "$1 - Journalctl" -e journalctl -e -u "$1"
}


quiet=0

borgdir="/run/borg-backup"
runfile="$borgdir/running"
errfile="$borgdir/error"

statedir="$HOME/.local/share/polybar"
state="$statedir/backup"

mkdir -p "$statedir"
touch "$state"

case "$1" in
	click-left)
		handle_left_click
		;;
	click-right)
		handle_right_click
		;;
	*)
		main "$@"
		;;
esac
