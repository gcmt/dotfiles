#!/bin/bash

current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$current_dir" || exit 1
source utils


notify() {
	if ! utils::polybar_visible && (( quiet == 0 )); then
		notify-send -t 3000 "$@"
	fi
}


notify_err() {
	notify -u critical "$@"
}


view_log() {
	urxvt -title "$1 - Journalctl" -e journalctl -e -u "$1"
}


main() {
	while true; do
		if read -r event archive < "$pipe"; then
			case $event in
				started)
					notify "Backup Started" "$archive"
					if [[ "$archive" =~ ^rsync\.net ]]; then
						echo " Backup"
					elif [[ "$archive" =~ MyPassport ]]; then
						echo " Backup"
					fi
					;;
				completed)
					notify "Backup Finished" "$archive"
					echo
					;;
				error)
					notify_err "Backup Failed" "$archive"
					echo '%{F#ce7d86} Backup%{F-}'
					;;
				clean)
					echo
					;;
			esac
		fi
	done
}


handle_left_click() {
	local archive
	if [[ -e "$err_file" ]]; then
		archive="$(cat "$err_file")"
	elif [[ -e "$arch_file" ]]; then
		archive="$(cat "$arch_file")"
	else
		return 1
	fi
	if [[ "$archive" =~ ^rsync\.net ]]; then
		view_log borg-backup-rsync
	elif [[ "$archive" =~ MyPassport ]]; then
		view_log borg-backup-hdd
	fi
}


handle_right_click() {
	if [[ -e "$err_file" ]]; then
		echo clean > "$pipe"
	fi
}


quiet=0

borg_dir="/run/borg-backup"
arch_file="$borg_dir/archive"
err_file="$borg_dir/error"

pipe="/tmp/polybar_backup.fifo"
if [[ ! -p "$pipe" ]]; then
	mkfifo "$pipe"
fi

case "$1" in
	click-left) handle_left_click ;;
	click-right) handle_right_click ;;
	*) main ;;
esac
