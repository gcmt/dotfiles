#!/usr/bin/python -u

import os
import sys
import time
from pathlib import Path
from datetime import datetime
from subprocess import run, PIPE
from threading import Thread, Event


FIFO = Path("/tmp/polybar_datetime.fifo")
STATE = Path(f"/run/user/{os.getuid()}/polybar_datetime_style")

FORMATS = {
    'default': '%a %d %H:%M',
    'utc': '%a %d %H:%M',
    'seconds': '%a %d %H:%M:%S'
}


def print_date(style):
    now = datetime.utcnow() if style == 'utc' else datetime.now()
    print(now.strftime(FORMATS.get(style)))


def clock(style, stop):
    while not stop.is_set():
        print_date(style)
        time.sleep(1)


def start_clock(style, stop):
    thread = Thread(target=clock, daemon=True, args=(style, stop))
    thread.start()
    return thread


def main():

    current = STATE.read_text()
    current = current if current else 'default'

    stop = Event()
    thread = start_clock(current, stop)

    while True:
        style = FIFO.read_text().strip()
        if style in FORMATS:
            STATE.write_text(style)
            stop.set()
            print_date(style)
            thread.join()
            stop.clear()
            thread = start_clock(style, stop)


def menu():

    styles = ["default", "seconds", "utc"]
    entries = "default\nshow seconds\nutc time"

    current = STATE.read_text()
    selected = styles.index(current) if current in styles else 0

    cmd = ['i3-tiny-menu', '-format', 'i', '-selected-row', str(selected)]

    try:
        stdout = run(cmd, input=entries, stdout=PIPE, encoding='utf8').stdout.strip()
    except FileNotFoundError:
        error('i3-tiny-menu not found')
        sys.exit(1)

    if not stdout:
        return

    style = styles[int(stdout)]
    FIFO.write_text(style + '\n')


if __name__ == '__main__':

    try:
        os.mkfifo(FIFO)
    except FileExistsError:
        pass

    STATE.touch()

    if '-menu' in sys.argv:
        menu()
    else:
        main()
