#!/usr/bin/python -u

import os
import sys
import time
import atexit
import signal
import threading
from pathlib import Path
from datetime import datetime
from subprocess import run, PIPE


FIFO = Path("/tmp/polybar_datetime.fifo")
STATE = Path(f"/run/user/{os.getuid()}/polybar_datetime_style")

FORMATS = {
    'default': '%a %d %H:%M',
    'utc': '%a %d %H:%M UTC',
    'seconds': '%a %d %H:%M:%S'
}


class Clock(threading.Thread):

    def __init__(self, style='default'):
        super().__init__(daemon=True)
        self.stop_event = threading.Event()
        self.style = style

    def run(self):
        while True:
            print_date(self.style)
            if self.stop_event.wait(timeout=1.0):
                return

    def stop(self):
        self.stop_event.set()
        self.join()


def start_clock(style):
    clock = Clock(style=style)
    clock.start()
    return clock


def print_date(style):
    now = datetime.utcnow() if style == 'utc' else datetime.now()
    t = now.strftime(FORMATS.get(style))
    print(f'%{{A3:{os.path.realpath(__file__)} -menu:}}{t}%{{A}}')


def get_current_style():
    current = STATE.read_text()
    return current if current in FORMATS else 'default'


def main():
    clock = start_clock(get_current_style())
    while True:
        style = FIFO.read_text().strip()
        if style in FORMATS:
            STATE.write_text(style)
            clock.stop()
            clock = start_clock(style)


def menu():

    styles = ['default', 'seconds', 'utc']
    entries = 'default\nshow seconds\nutc time'

    selected = styles.index(get_current_style())
    cmd = ['i3-tiny-menu', '-format', 'i', '-selected-row', str(selected)]

    try:
        stdout = run(cmd, input=entries, stdout=PIPE, encoding='utf8').stdout.strip()
    except FileNotFoundError:
        error('i3-tiny-menu not found')
        sys.exit(1)

    if not stdout:
        return

    style = styles[int(stdout)]
    FIFO.write_text(style + '\n')


def err(message):
    scriptname = os.path.basename(__file__)
    print(f"{scriptname}: {message}", file=sys.stderr)
    sys.exit(1)


if __name__ == '__main__':

    if '-menu' in sys.argv:

        if not FIFO.is_fifo():
            err("module not running")
        menu()

    else:

        if FIFO.is_fifo():
            err("module already running")

        try:
            os.mkfifo(FIFO)
        except FileExistsError:
            pass

        STATE.touch()

        def cleanup(*args):
            try:
                FIFO.unlink()
                STATE.unlink()
            except FileNotFoundError:
                pass

        atexit.register(cleanup)
        signal.signal(signal.SIGINT, cleanup)
        signal.signal(signal.SIGTERM, cleanup)

        main()
