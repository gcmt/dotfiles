#!/bin/bash

TIMER_START_TIME=0
DATETIME_STATE_FILE="$HOME/.cache/polybar-datetime.state"
FORMATS=(def sec utc est pst)

CURRENT_FMT="$(cat "${DATETIME_STATE_FILE}" 2>/dev/null)"
if [ -z "${CURRENT_FMT}" ]; then
    CURRENT_FMT="${FORMATS[0]}"
fi

format_time() {
    local sign out
    (( $1 >= 0 )) && sign="" || sign="-"
    local t=${1#-}
    local d=$(( t / 60 / 60 / 24 ))
    local h=$(( t / 60 / 60 % 24 ))
    local m=$(( t / 60 % 60 ))
    local s=$(( t % 60 ))
    (( s > 0 || m > 0 )) && out="${s}s"
    (( m > 0 || h > 0 )) && out="${m}m ${out}"
    (( h > 0 || d > 0 )) && out="${h}h ${out}"
    (( d > 0 )) && out="${d}d ${out}"
    (( s == 0 && m == 0 && h == 0 && d == 0 )) && out="0s"
    echo "${sign}${out}"
}

print_label() {
    local label_time label_timer elapsed_time
    case "${CURRENT_FMT}" in
        def) label_time=$(date +"%a %d %H:%M") ;;
        sec) label_time=$(date +"%a %d %H:%M:%S") ;;
        utc) label_time=$(date -u +"%a %d %H:%M UTC") ;;
        est) label_time=$(TZ=America/New_York date +"%a %d %H:%M EST") ;;
        pst) label_time=$(TZ=America/Los_Angeles date +"%a %d %H:%M PST") ;;
        *) label_time="unknown format" ;;
    esac
    case "${TIMER_START_TIME}" in
        0)
            label_timer=""
            ;;
        *)
            elapsed_time="$(format_time $(( $(date +%s) - TIMER_START_TIME )))"
            label_timer="  %{F#999}|%{F-}  ï‹² ${elapsed_time}"
            ;;
    esac
    echo "%{A1:kill -USR1 $$:}%{A3:kill -USR2 $$:}${label_time}${label_timer}%{A}%{A}"
}

trap 'toggle_timer' USR2
toggle_timer() {
    case "${TIMER_START_TIME}" in
        0) TIMER_START_TIME=$(date +%s) ;;
        *) TIMER_START_TIME=0 ;;
    esac
}

trap 'next_format' USR1
next_format() {
    local len=${#FORMATS[@]}
    for i in "${!FORMATS[@]}"; do
       if [[ "${FORMATS[$i]}" == "${CURRENT_FMT}" ]]; then
            CURRENT_FMT="${FORMATS[$(((i + 1) % len))]}"
            break
       fi
    done
}

trap 'save_state' 0
save_state() {
    echo -n "${CURRENT_FMT}" > "${DATETIME_STATE_FILE}"
}

main() {
    while true; do
        print_label
        sleep 1s &
        wait $!
    done
}

main
