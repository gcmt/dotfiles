#!/usr/bin/python -u

import os
import atexit
import signal
import threading
import logging
from pathlib import Path
from logging.handlers import RotatingFileHandler

import i3pie
from i3pie import Event


FIFO = Path("/tmp/polybar_i3.fifo")
LOGFILE = Path("/tmp/polybar_i3.log")
MODE = None


logging.basicConfig(
    handlers=[RotatingFileHandler(LOGFILE, maxBytes=1000000, backupCount=1)],
    level=logging.DEBUG,
    format="[%(asctime)s] %(levelname)s %(message)s",
    datefmt='%Y-%m-%d:%M:%S'
)


class Colors:
    dim =    {"fg": "#a2a6ad", "bg": "#e7e8eb"}
    mode =   {"fg": "#e7e8eb", "bg": "#ce7d86"}
    urgent = {"fg": "#e7e8eb", "bg": "#ce7d86"}
    normal = {"fg": "#52565e", "bg": "#e7e8eb"}
    active = {"fg": "#52565e", "bg": "#c2c7ce"}
    hidden = {"fg": "#a2a6ad", "bg": "#e7e8eb"}
    hidden_active = {"fg": "#848891", "bg": "#c2c7ce"}


def padded(s):
    return f"  {s}  "


def clickable(s, btn=1, cmd=""):
    cmd = cmd.replace(":", r"\:")
    return f"%{{A{btn}:{cmd}:}}{s}%{{A}}"


def colored(s, fg=None, bg=None):
    ret = s
    ret = f"%{{B{bg}}}{ret}%{{B-}}" if bg else ret
    ret = f"%{{F{fg}}}{ret}%{{F-}}" if fg else ret
    return ret


def is_hidden(w):
    return w.name.startswith("_") or w.name.endswith("_")


def draw(subscriber, conn, event, data, all=False):

    global MODE
    if event == Event.MODE:
        MODE = data["change"]

    out = ""
    hidden = []
    MODE = MODE != "default" and MODE
    menu_cmd = "i3-choose-window -no-inputbar -tiny -mouse"

    # disable clicks when a mode is active
    def _clickable(string, **kwargs):
        if not MODE:
            return clickable(string, **kwargs)
        return string

    tree = conn.get_tree()
    active = tree.current_workspace()
    workspaces = list(tree.workspaces())
    # focused = tree.focused_window()

    numbered = []
    labeled = []
    _scratch = []
    _hidden = []
    
    for i, w in enumerate(workspaces):
        if w.name == "_scratch":
            _scratch = [w]
        elif is_hidden(w):
            _hidden.append(w)
        elif w.name[0].isdigit():
            numbered.append(w)
        else:
            labeled.append(w)

    numbered = sorted(numbered, key=lambda w: w.name)
    labeled = sorted(labeled, key=lambda w: w.name)

    for w in labeled + numbered + _hidden + _scratch:
        is_hidden_ = is_hidden(w)
        if not all and is_hidden_ and w is not active:
            hidden.append(w)
            continue

        colors = Colors.hidden if is_hidden_ else Colors.normal
        if w is active:
            colors = Colors.hidden_active if is_hidden_ else Colors.active
        if w.urgent:
            colors = Colors.urgent
        
        name = w.name.strip("_")
        if name == "scratch":
            block = colored(padded(""), **colors)
        elif name == "mail":
            block = colored(padded(""), **colors)
        elif name == "web":
            block = colored(padded(""), **colors)
        elif name in ("dev", "code"):
            block = colored(padded(""), **colors)
        elif name == "music": 
            block = colored(padded(""), **colors)
        elif name == "steam": 
            block = colored(padded(""), **colors)
        else:
            block = colored(padded(name), **colors)

        block = _clickable(block, btn=1, cmd=f"i3-msg workspace {w.name}")
        block = _clickable(
            block, btn=3, cmd=f"{menu_cmd} -hide-workspace -g 'workspace_name={w.name}'"
        )
        out += block

    indicator = ""

    if all:
        indicator = "‹"
        indicator = colored(padded(indicator), **Colors.dim)
        indicator = _clickable(indicator, btn=1, cmd=f"echo visible > '{FIFO}'")
    elif hidden:
        indicator = "+" * len(hidden)  # ›
        indicator = colored(padded(indicator), **Colors.dim)
        cmd = f"echo all > '{FIFO}'"
        if len(hidden) == 1 and not is_hidden(active):
            # automatically focus hidden workspace
            cmd += f"&& i3-msg workspace {hidden[0].name}"
        indicator = _clickable(indicator, btn=1, cmd=cmd)
        indicator = _clickable(
            indicator, btn=3, cmd=f"{menu_cmd} -g 'workspace_name~^_'"
        )

    out += indicator

    if MODE:
        out += colored(padded(MODE), **Colors.mode)

    out = _clickable(out, btn=2, cmd=f"{menu_cmd}")
    out += _clickable("     ", btn=1, cmd="i3-new-workspace")

    # if focused:
        # map_ = {'splith': 'split |', 'splitv': 'split —', 'stacked': 'stack', 'tabbed': 'tabs'}
        # orientation = map_.get(focused.parent.layout, "")
        # out += colored(f"{padded(orientation)}", **Colors.dim)

    logging.debug(out)
    print(out)


def main(conn):

    try:
        os.mkfifo(FIFO)
    except FileExistsError:
        pass

    def cleanup(*args):
        FIFO.unlink()
        conn.close()

    def exit(*args):
        raise SystemExit

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, exit)
    signal.signal(signal.SIGTERM, exit)

    draw(None, conn, Event.NONE, {})

    def listen_fifo(conn):
        while True:
            msg = FIFO.read_text().strip()
            if msg == "visible":
                draw(None, conn, Event.NONE, {}, all=False)
            elif msg == "all":
                draw(None, conn, Event.NONE, {}, all=True)

    thread = threading.Thread(target=listen_fifo, args=(conn,), daemon=True)
    thread.start()

    mask = Event.WORKSPACE | Event.WINDOW | Event.MODE | Event.BINDING
    conn.subscribe(mask, draw)
    conn.listen()


if __name__ == "__main__":
    with i3pie.Connection() as conn:
        main(conn)
