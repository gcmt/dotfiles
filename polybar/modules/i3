#!/usr/bin/python -u

import os
import atexit
import signal
import pathlib
import threading

import i3pie
from i3pie import Event


FIFO = pathlib.Path("/tmp/polybar_i3.fifo")


class Colors:

    dim = {"fg": "#a2a6ad", "bg": "#e7e8eb"}
    mode = {"fg": "#e7e8eb", "bg": "#ce7d86"}

    urgent = {"fg": "#e7e8eb", "bg": "#ce7d86"}
    normal = {"fg": "#52565e", "bg": "#e7e8eb"}
    active = {"fg": "#52565e", "bg": "#c2c7ce"}

    hidden = {"fg": "#a2a6ad", "bg": "#e7e8eb"}
    hidden_active = {"fg": "#848891", "bg": "#c2c7ce"}


def padded(s):
    return f"  {s}  "


def clickable(s, btn=1, cmd=""):
    cmd = cmd.replace(":", "\:")
    return f"%{{A{btn}:{cmd}:}}{s}%{{A}}"


def colored(s, fg=None, bg=None):
    ret = s
    ret = f"%{{B{bg}}}{ret}%{{B-}}" if bg else ret
    ret = f"%{{F{fg}}}{ret}%{{F-}}" if fg else ret
    return ret


def draw(sub, conn, event, data, all=False):

    mode = None
    if event == Event.MODE:
        mode = data["change"]

    out = ""
    hidden = []
    mode = mode != "default" and mode
    menu_cmd = "i3-choose-window -no-inputbar -tiny -mouse"

    # disable clicks when a mode is active
    def _clickable(string, **kwargs):
        if not mode:
            return clickable(string, **kwargs)
        return string

    tree = conn.get_tree()
    active = tree.current_workspace()
    workspaces = list(tree.workspaces())

    # move the scratchpad to the very end
    for i, w in enumerate(workspaces):
        if w.name == "_scratch":
            workspaces.append(workspaces.pop(i))
            break

    for w in workspaces:
        is_hidden = w.name.startswith("_")
        if not all and is_hidden and w is not active:
            hidden.append(w)
            continue

        colors = Colors.hidden if is_hidden else Colors.normal
        if w is active:
            colors = Colors.hidden_active if is_hidden else Colors.active
        if w.urgent:
            colors = Colors.urgent

        block = colored(padded(w.name.lstrip("_")), **colors)
        block = _clickable(block, btn=1, cmd=f"i3-msg workspace {w.name}")
        block = _clickable(
            block, btn=3, cmd=f"{menu_cmd} -hide-workspace -g 'workspace_name={w.name}'"
        )
        out += block

    indicator = ""

    if all:
        indicator = "‹"
        indicator = colored(padded(indicator), **Colors.dim)
        indicator = _clickable(indicator, btn=1, cmd=f"echo visible > '{FIFO}'")
    elif hidden:
        indicator = "›" * len(hidden)
        indicator = colored(padded(indicator), **Colors.dim)
        indicator = _clickable(indicator, btn=1, cmd=f"echo all > '{FIFO}'")
        indicator = _clickable(
            indicator, btn=3, cmd=f"{menu_cmd} -g 'workspace_name~^_'"
        )

    out += indicator

    if mode:
        out += colored(padded(mode), **Colors.mode)

    out = _clickable(out, btn=2, cmd=f"{menu_cmd}")
    out += _clickable("     ", btn=1, cmd="i3-new-workspace")
    print(out)


def main(conn):

    try:
        os.mkfifo(FIFO)
    except FileExistsError:
        pass

    def cleanup(*args):
        FIFO.unlink()
        conn.close()

    def exit(*args):
        raise SystemExit

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, exit)
    signal.signal(signal.SIGTERM, exit)

    draw(None, conn, Event.NONE, {})

    def listen(conn):
        conn.subscribe(Event.WORKSPACE | Event.WINDOW | Event.MODE, draw)
        conn.listen()

    thread = threading.Thread(target=listen, args=(conn,), daemon=True)
    thread.start()

    while True:
        msg = FIFO.read_text().strip()
        if msg == "visible":
            draw(None, conn, Event.NONE, {}, all=False)
        elif msg == "all":
            draw(None, conn, Event.NONE, {}, all=True)


if __name__ == "__main__":
    with i3pie.Connection() as conn:
        main(conn)
