#!/usr/bin/python -u

import os
import i3ipc
import atexit
import signal
from pathlib import Path
from threading import Thread


FIFO = Path("/tmp/polybar_i3.fifo")


class Colors:

    dim    = {'fg': '#a2a6ad', 'bg': '#e7e8eb'}
    mode   = {'fg': '#e7e8eb', 'bg': '#ce7d86'}

    urgent = {'fg': '#e7e8eb', 'bg': '#ce7d86'}
    normal = {'fg': '#52565e', 'bg': '#e7e8eb'}
    active = {'fg': '#52565e', 'bg': '#c2c7ce'}

    hidden = {'fg': '#a2a6ad', 'bg': '#e7e8eb'}
    hidden_active = {'fg': '#848891', 'bg': '#c2c7ce'}


def padded(s):
    return f'  {s}  '


def clickable(s, btn=1, cmd=''):
    cmd = cmd.replace(':', '\:')
    return f'%{{A{btn}:{cmd}:}}{s}%{{A}}'


def colored(s, fg=None, bg=None):
    rv = s
    rv = f'%{{B{bg}}}{rv}%{{B-}}' if bg else rv
    rv = f'%{{F{fg}}}{rv}%{{F-}}' if fg else rv
    return rv


def draw(i3, mode=None, all=False):

    out = ''
    hidden = []
    mode = mode != 'default' and mode
    menu_cmd = "i3-choose-window -no-inputbar -tiny -mouse"

    # disable clicks when a mode is active
    _clickable = lambda s, **kwargs: s if mode else clickable(s, **kwargs)

    tree = i3.get_tree()
    active = tree.find_focused().workspace()

    # move the scratchpad at the end
    workspaces = tree.workspaces()
    for i, w in enumerate(workspaces):
        if w.name == '_scratch':
            workspaces.append(workspaces.pop(i))
            break

    for w in workspaces:
        is_hidden = w.name.startswith('_')
        if not all and is_hidden and not w is active:
            hidden.append(w)
            continue
        colors = Colors.hidden if is_hidden else Colors.normal
        if w is active:
            colors = Colors.hidden_active if is_hidden else Colors.active
        if w.urgent:
            colors = Colors.urgent
        block = colored(padded(w.name.lstrip('_')), **colors)
        block = _clickable(block, btn=1, cmd=f'i3-msg workspace {w.name}')
        block = _clickable(block, btn=3, cmd=f"{menu_cmd} -hide-workspace -g 'workspace_name={w.name}'")
        out += block

    indicator = ''

    if all:
        indicator = '‹'
        indicator = colored(padded(indicator), **Colors.dim)
        indicator = _clickable(indicator, btn=1, cmd=f"echo visible > '{FIFO}'")
    elif hidden:
        indicator = '›' * len(hidden)
        indicator = colored(padded(indicator), **Colors.dim)
        indicator = _clickable(indicator, btn=1, cmd=f"echo all > '{FIFO}'")
        indicator = _clickable(indicator, btn=3, cmd=f"{menu_cmd} -g 'workspace_name~^_'")

    out += indicator

    if mode:
        out += colored(padded(mode), **Colors.mode)

    out = _clickable(out, btn=2, cmd=f"{menu_cmd}")
    out += _clickable("     ", btn=1, cmd="i3-new-workspace")
    print(out)


def listen_i3(i3):
    i3.on('workspace', lambda self, e: draw(self))
    i3.on('window', lambda self, e: draw(self))
    i3.on('mode', lambda self, e: draw(self, mode=e.change))
    i3.main()


def listen_fifo(i3):
    while True:
        msg = FIFO.read_text().strip()
        if msg == 'visible':
            draw(i3, all=False)
        elif msg == 'all':
            draw(i3, all=True)


def main():

    try:
        os.mkfifo(FIFO)
    except FileExistsError:
        pass

    def cleanup(*args):
        try:
            FIFO.unlink()
        except FileNotFoundError:
            pass

    def exit(*args):
        sys.exit()

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, exit)
    signal.signal(signal.SIGTERM, exit)

    i3 = i3ipc.Connection()

    draw(i3)

    Thread(target=listen_i3, args=(i3,), daemon=True).start()
    listen_fifo(i3)


if __name__ == '__main__':
    main()
