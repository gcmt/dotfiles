
set -s escape-time 0
set -s focus-events on
set -s set-clipboard off

set -s default-terminal "xterm-256color"
set -sa terminal-overrides ",xterm*:Tc,st*:Tc"

set -g mouse on

set -g history-limit 10000

setw -g aggressive-resize on

set -g renumber-windows on
setw -g automatic-rename on

set -g base-index 1
setw -g pane-base-index 1

set -g set-titles on
set -g set-titles-string '#S - Tmux'

set -g visual-bell off
set -g visual-activity off

set -g activity-action other
set -g bell-action other

set -g monitor-activity off
set -g monitor-bell on

setw -g display-panes-colour colour23
setw -g display-panes-active-colour cyan

setw -g mode-style fg=colour18,bg=colour23,bold

set -g message-style fg=colour19,bg=colour21,bold
set -g message-command-style fg=colour19,bg=colour21,bold

set -g pane-border-status off
set -g pane-border-format " [ ###P #T ] "
set -g pane-border-style fg=colour23
set -g pane-active-border-style fg=colour22

set -g status on
set -g status-interval 2
set -g status-position bottom
set -g status-justify left
set -g status-style fg=colour21,bg=colour24

set -g status-left-length 40
set -g status-left " #S #[bg=colour19] "

set -g status-right-length 40
set -g status-right "#{?client_prefix,#[bg=colour19] #[bg=default] C-x ,}"

setw -g window-status-format "#[bg=default] #I #W#{?window_activity_flag, [+],}#{?window_bell_flag, [!],}#{?window_zoomed_flag, [z],} #[bg=colour19] "
setw -g window-status-current-format "#[bold]#[bg=colour22]#[fg=colour19] #I #W#{?window_zoomed_flag, [z],} #[bg=colour19]#[nobold] "
setw -g window-status-separator ""

setw -g window-status-activity-style fg=red
setw -g window-status-bell-style fg=red

set -s command-alias[10] rename-pane='select-pane -T'
set -s command-alias[11] renamep='select-pane -T'
set -s command-alias[20] reload='source ~/.config/tmux/tmux.conf'

set -g prefix C-x

unbind C-b
bind C-x send-prefix

setw -g mode-keys vi
setw -g status-keys emacs

# vi-like copy mode
bind Pageup copy-mode -eu
bind -T copy-mode-vi q send -X cancel
bind -T copy-mode-vi C-c send -X cancel
bind -T copy-mode-vi Escape send -X clear-selection
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection \; display ' copied'
bind -T copy-mode-vi a send -X append-selection \; display ' appended'
bind -T copy-mode-vi + send -X copy-pipe 'xclip -sel clip' \; display ' copied to system clipboard'
bind -T copy-mode-vi C-o send -X copy-pipe-and-cancel 'read url; firefox -new-tab "$url"; i3-focus -c Firefox -m -'
bind -T copy-mode-vi C-u send -X scroll-down
bind -T copy-mode-vi C-k send -X -N 3 scroll-up
bind -T copy-mode-vi C-j send -X -N 3 scroll-down
bind -T copy-mode-vi K send -X -N 3 cursor-up
bind -T copy-mode-vi J send -X -N 3 cursor-down
bind -T copy-mode-vi C-b send -X page-up
bind -T copy-mode-vi C-f send -X page-down
bind -T copy-mode-vi / command-prompt -p "search-forward:" "send -X search-forward \"%%%\""
bind -T copy-mode-vi ? command-prompt -p "search-backward:" "send -X search-backward \"%%%\""

# don't exit copy mode when mouse is released
unbind -T copy-mode-vi MouseDragEnd1Pane

# choose buffer to copy to system clipboard
bind + choose-buffer "run -b 'tmux save-buffer -b %1 - | xclip -sel clip' \; display ' %1 copied to system clipboard'"

# even layout
bind Space select-layout -E

# kill session without detaching the client
bind d run "tmux confirm-before -p \" kill-session '#S'? (y/n)\" \"switch-client -t '=scratch' ; kill-session -t '=#S'\""
bind BSpace run "tmux confirm-before -p \" reset-session '#S'? (y/n)\" \"kill-window -a ; kill-pane -a\""

# kill pane(s)
unbind x
bind c confirm-before -p " kill-pane? (y/n)" kill-pane
bind C confirm-before -p " kill-pane -a? (y/n)" "kill-pane -a"

# create new window
bind Enter new-window -c "#{pane_current_path}"

# create new window (if a name is given then a named window is created)
# bind Enter command-prompt -p " new-window:" "if -F '%1' 'new-window -n \"%1\" -c \"#{pane_current_path}\"' 'new-window -c \"#{pane_current_path}\"'"

# rename things
bind , command-prompt -p " rename-window:" -I "#W" "rename-window '%%'"

# swap panes in the current window
bind . display-message " Swap panes in the current window" \; display-pane -d 0 "swap-pane -dt '%%'"

# activate automatic window renaming
bind < setw automatic-rename on

# kill window(s)
bind q confirm-before -p ' kill-window "#I #W"? (y/n)' kill-window
bind Q confirm-before -p " kill-window -a? (y/n)" "kill-window -a"

# go to the last visited window
bind a last-window

# rotate panes
bind r rotate-window -D \; select-pane -t +
bind R rotate-window -U \; select-pane -t -

# rotate panes staying in place
bind g rotate-window -D
bind G rotate-window -U

# split window using the current path
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 2

# pane navigation
bind h select-pane -L
bind j select-pane -D
bind l select-pane -R
bind k select-pane -U

# select next/previous panes
bind w select-pane -t +
bind W select-pane -t -

# window navigation
bind -r p select-window -t -
bind -r n select-window -t +

# move windows
bind -r P swap-window -t -
bind -r N swap-window -t +

# when moving to a window, create it if it does not exist
bind 1 if "tmux selectw -t :=1" "" "neww -t 1 -c '#{pane_current_path}'"
bind 2 if "tmux selectw -t :=2" "" "neww -t 2 -c '#{pane_current_path}'"
bind 3 if "tmux selectw -t :=3" "" "neww -t 3 -c '#{pane_current_path}'"
bind 4 if "tmux selectw -t :=4" "" "neww -t 4 -c '#{pane_current_path}'"
bind 5 if "tmux selectw -t :=5" "" "neww -t 5 -c '#{pane_current_path}'"
bind 6 if "tmux selectw -t :=6" "" "neww -t 6 -c '#{pane_current_path}'"
bind 7 if "tmux selectw -t :=7" "" "neww -t 7 -c '#{pane_current_path}'"
bind 8 if "tmux selectw -t :=8" "" "neww -t 8 -c '#{pane_current_path}'"
bind 9 if "tmux selectw -t :=9" "" "neww -t 9 -c '#{pane_current_path}'"

# shortcuts
bind C-t if "tmux selectw -t :=tests" "" "neww -n tests -c '#{pane_current_path}'"
bind C-e if "tmux selectw -t :=editor" "" "neww -n editor -c '#{pane_current_path}'"
bind C-d if "tmux selectw -t :=debug" "" "neww -n debug -c '#{pane_current_path}'"

# choose windows or sessions interactively
bind t choose-tree -Zs -f '#{&&:#{!=:#S,cmus},#{!=:#S,calc}}'
bind T choose-tree -Zw -f '#{&&:#{!=:#S,cmus},#{!=:#S,calc}}'

# choose windows of the current session only
bind / run "tmux choose-tree -Zw -f '##{==:##S,#S}' -F '##{?window_format,##W##F \"##{pane_title}\",}'"

# open a new client linked to the current session in a different terminal window
bind _ run -b "kitty -e tmux new -t '#S' \\; set destroy-unattached"

# display pane numbers
bind '#' display-panes -d 0

# zoom next pane
bind Z select-pane -t + \; resize-pane -Z
bind TAB select-pane -t + \; resize-pane -Z

# cycle layouts
bind \\ select-layout even-vertical
bind | select-layout even-horizontal

# cycle all layouts
bind > select-layout -n

# toggle statuses
bind b set status

# move pane to a different window
bind B break-pane -t :

# toggle activity monitoring in the current window
bind @ setw monitor-activity \; display-message " Monitoring #{?monitor-activity,ON,OFF}"
