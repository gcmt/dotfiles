
priority -10

# statements

snippet for "For loop" b
for ${1}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet fori "Integer for loop" b
for ${1:i} := 0; $1 ${2}; $1++ {
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" b
for ${1} := range ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition} {
	${2:${VISUAL}}
} ${3}
endsnippet

snippet el "Else statement" i
else {
	${1:${VISUAL}}
} ${0}
endsnippet

snippet eli "Else-If statement" i
else if ${1:condition} {
	${2:${VISUAL}}
} ${0}
endsnippet

snippet ife "If-Else statement" b
if ${1:condition} {
	${2:${VISUAL}}
} else {
	${3:${VISUAL}}
} ${4}
endsnippet

# functions

global !p

import re

# Automatically wrap return types with parentheses

def return_values(s):
	# remove everything wrapped in parentheses
	s = re.sub("\(.*?\)|\([^)]*$", "", s)
	return len(s.split(","))

def opening_par(snip, pos):
	if return_values(t[pos]) > 1 and not t[pos].startswith("("):
		snip.rv = "("
	else:
		snip.rv = ""

def closing_par(snip, pos):
	if return_values(t[pos]) > 1:
		snip.rv = ")"
	else:
		snip.rv = ""

endglobal

snippet /^init/ "Init function" r
func init() {
	${0:${VISUAL}}
}

endsnippet
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet met "Method" b
func (${1}) ${2:foo}(${3})${4/(.+)/ /}`!p opening_par(snip, 4)`$4`!p closing_par(snip, 4)` {
	${0:${VISUAL}}
}
endsnippet

snippet fun "Function" b
func ${1:foo}(${2})${3/(.+)/ /}`!p opening_par(snip, 3)`$3`!p closing_par(snip, 3)` {
	${0:${VISUAL}}
}
endsnippet

snippet /(?<=\s\=\s|:\=\s)fun/ "Anonymous function" r
func(${1})${2/(.+)/ /}`!p opening_par(snip, 2)`$2`!p closing_par(snip, 2)` {
	${3}
}
endsnippet

snippet /((?<=,\s|\(\s)|(?<=,|\())fun/ "Anonymous function" r
func(${1})${2/(.+)/ /}`!p opening_par(snip, 2)`$2`!p closing_par(snip, 2)` {
	${3}
}
endsnippet

snippet gof "Anonymous Goroutine" b
go func() {
	${1}
}()
endsnippet

snippet def "Anonymous Defer" i
defer func() {
	${1}
}()
endsnippet

# types, variables, constants

snippet json "JSON field"
\`json:"${1}"\`
endsnippet

# error handling

snippet e "Error clause " !b
if err != nil {
	${1}
}
endsnippet

snippet ei "Error clause " !b
if ${1}; err != nil {
	${2}
} ${3}
endsnippet

# printing, logging

snippet ff "Fmt Printf debug" !b
fmt.Printf("${1} %+v\n", $1)
endsnippet

snippet fl "Fmt Println debug" !b
fmt.Println(${1})
endsnippet

snippet lf "Log Printf debug" !b
log.Printf("${1} %+v\n", $1)
endsnippet

snippet ll "Log Println debug" !b
log.Println(${1})
endsnippet

# tests

snippet test "test function" b
func Test${1:Function}(t *testing.T) {
	${2}
}
endsnippet

# misc

snippet hs "http.HandlerFunc params" i
w http.ResponseWriter, r *http.Request
endsnippet

snippet hf "http.HandlerFunc" i
http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	${1}
})
endsnippet

# vim:ft=snippets:
